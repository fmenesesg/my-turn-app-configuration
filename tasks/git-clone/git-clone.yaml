apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  labels:
    based-on: "https://github.com/tektoncd/catalog/blob/master/git/git-clone.yaml"
  name: git-clone
spec:
  workspaces:
  - name: source-code
    description: The git repo will be cloned onto the volume backing this workspace
  inputs:
    params:
    - name: url
      description: git url to clone
      type: string
    - name: revision
      description: git revision to checkout (branch, tag, sha, refâ€¦)
      type: string
      default: master
    - name: sslVerify
      description: defines if http.sslVerify should be set to true or false in the global git config
      type: string
      default: "true"
    - name: subdirectory
      description: subdirectory inside the "output" workspace to clone the git repo into, have to starts with "/"
      type: string
      default: "/"
    - name: deleteExisting
      description: clean out the contents of the repo's destination directory (if it already exists) before trying to clone the repo there
      type: string
      default: "false"
  results:
  - name: commit
    description: The precise commit SHA that was fetched by this Task
  steps:
  - name: clone
    image: quay.io/rshop/git-alpine:master
    script: |
      DESTINATION_DIR="$(workspaces.source-code.path)/$(inputs.params.subdirectory)"
      cleandir() {
        # Delete any existing contents of the repo directory if it exists.
        #
        # We don't just "rm -rf $CHECKOUT_DIR" because $CHECKOUT_DIR might be "/"
        # or the root of a mounted volume.
        if [[ -d "$DESTINATION_DIR" ]] ; then
          # Delete non-hidden files and directories
          rm -rf "$DESTINATION_DIR"/*
          # Delete files and directories starting with . but excluding ..
          rm -rf "$DESTINATION_DIR"/.[!.]*
          # Delete files and directories starting with .. plus any other character
          rm -rf "$DESTINATION_DIR"/..?*
        fi
      }
      if [[ "$(inputs.params.deleteExisting)" == "true" ]] ; then
        cleandir
      fi
      git clone --branch "$(inputs.params.revision)" "$(inputs.params.url)" cloned
      CHECKOUT_DIR="$(pwd)/cloned$(inputs.params.subdirectory)"
      if [ ! -d "$CHECKOUT_DIR" ]; then
        echo "Subdirectory doesn't exists"
        exit 1;
      fi
      cp -a "${CHECKOUT_DIR}/." "${DESTINATION_DIR}/"
      cd "$CHECKOUT_DIR"
      RESULT_SHA="$(git rev-parse HEAD | tr -d '\n')"
      EXIT_CODE="$?"
      if [ "$EXIT_CODE" != 0 ]
      then
        exit $EXIT_CODE
      fi
      # Make sure we don't add a trailing newline to the result!
      echo -n "$RESULT_SHA" > $(results.commit.path)
